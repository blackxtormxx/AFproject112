var global = arguments[3];
(function(a, b) {
    if ("function" == typeof define && define.amd) define([], b);
    else if ("undefined" != typeof exports) b();
    else b(), a.FileSaver = {
    };
})(this, function() {
    "use strict";
    function b(a, b1) {
        return "undefined" == typeof b1 ? b1 = {
            autoBom: !1
        } : "object" != typeof b1 && (console.warn("Deprecated: Expected third argument to be a object"), b1 = {
            autoBom: !b1
        }), b1.autoBom && /^\s*(?:text\/\S*|application\/xml|\S*\/\S*\+xml)\s*;.*charset\s*=\s*utf-8/i.test(a.type) ? new Blob([
            "\uFEFF",
            a
        ], {
            type: a.type
        }) : a;
    }
    function c(a, b1, c1) {
        var d = new XMLHttpRequest;
        d.open("GET", a), d.responseType = "blob", d.onload = function() {
            g(d.response, b1, c1);
        }, d.onerror = function() {
            console.error("could not download file");
        }, d.send();
    }
    function d(a) {
        var b1 = new XMLHttpRequest;
        b1.open("HEAD", a, !1);
        try {
            b1.send();
        } catch (a1) {
        }
        return 200 <= b1.status && 299 >= b1.status;
    }
    function e(a) {
        try {
            a.dispatchEvent(new MouseEvent("click"));
        } catch (c1) {
            var b1 = document.createEvent("MouseEvents");
            b1.initMouseEvent("click", !0, !0, window, 0, 0, 0, 80, 20, !1, !1, !1, !1, 0, null), a.dispatchEvent(b1);
        }
    }
    var f = "object" == typeof window && window.window === window ? window : "object" == typeof self && self.self === self ? self : "object" == typeof global && global.global === global ? global : void 0, a = f.navigator && /Macintosh/.test(navigator.userAgent) && /AppleWebKit/.test(navigator.userAgent) && !/Safari/.test(navigator.userAgent), g = f.saveAs || ("object" != typeof window || window !== f ? function() {
    } : "download" in HTMLAnchorElement.prototype && !a ? function(b2, g1, h) {
        var i = f.URL || f.webkitURL, j = document.createElement("a");
        g1 = g1 || b2.name || "download", j.download = g1, j.rel = "noopener", "string" == typeof b2 ? (j.href = b2, j.origin === location.origin ? e(j) : d(j.href) ? c(b2, g1, h) : e(j, j.target = "_blank")) : (j.href = i.createObjectURL(b2), setTimeout(function() {
            i.revokeObjectURL(j.href);
        }, 40000), setTimeout(function() {
            e(j);
        }, 0));
    } : "msSaveOrOpenBlob" in navigator ? function(f1, g1, h) {
        if (g1 = g1 || f1.name || "download", "string" != typeof f1) navigator.msSaveOrOpenBlob(b(f1, h), g1);
        else if (d(f1)) c(f1, g1, h);
        else {
            var i = document.createElement("a");
            i.href = f1, i.target = "_blank", setTimeout(function() {
                e(i);
            });
        }
    } : function(b2, d1, e1, g1) {
        if (g1 = g1 || open("", "_blank"), g1 && (g1.document.title = g1.document.body.innerText = "downloading..."), "string" == typeof b2) return c(b2, d1, e1);
        var h = "application/octet-stream" === b2.type, i = /constructor/i.test(f.HTMLElement) || f.safari, j = /CriOS\/[\d]+/.test(navigator.userAgent);
        if ((j || h && i || a) && "undefined" != typeof FileReader) {
            var k = new FileReader;
            k.onloadend = function() {
                var a1 = k.result;
                a1 = j ? a1 : a1.replace(/^data:[^;]*;/, "data:attachment/file;"), g1 ? g1.location.href = a1 : location = a1, g1 = null;
            }, k.readAsDataURL(b2);
        } else {
            var l = f.URL || f.webkitURL, m = l.createObjectURL(b2);
            g1 ? g1.location = m : location.href = m, g1 = null, setTimeout(function() {
                l.revokeObjectURL(m);
            }, 40000);
        }
    });
    f.saveAs = g.saveAs = g, "undefined" != typeof module && (module.exports = g);
});
